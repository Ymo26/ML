import pandas as pd

# Load the dataset
file_path = "hotel_booking.csv"  # Adjust the path if needed
df = pd.read_csv(file_path)

# Display the first few rows
print(df.head())

print(df.info())  # Check column names, types, and missing values
print(df.describe())  # Check basic statistics


# lstm_forecast.py
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator
from tensorflow.keras.optimizers import Adam

# Load data
df = pd.read_csv('hotel_booking.csv')

# Ensure reservation_status_date is datetime (if available) and sort by date
if 'reservation_status_date' in df.columns:
    df['reservation_status_date'] = pd.to_datetime(df['reservation_status_date'])
    df = df.sort_values('reservation_status_date')
else:
    # If not available, sort by lead_time as a proxy (or adjust as needed)
    df = df.sort_values('lead_time')

# Use 'adr' (average daily rate) as the time series
time_series = df['adr'].values.reshape(-1, 1)

# Standardize the time series
scaler = StandardScaler()
time_series_scaled = scaler.fit_transform(time_series)

# Create a time series generator
sequence_length = 10  # use past 10 values to predict the next
batch_size = 32
generator = TimeseriesGenerator(time_series_scaled, time_series_scaled, length=sequence_length, batch_size=batch_size)

# Build the LSTM model
model = Sequential()
model.add(LSTM(50, activation='relu', input_shape=(sequence_length, 1)))
model.add(Dense(1))
model.compile(optimizer=Adam(learning_rate=0.001), loss='mse')

# Train the model
history = model.fit(generator, epochs=50, verbose=1)

# Forecast on the training data (for demonstration)
predictions = model.predict(generator)
# Inverse transform to original scale
predictions_inv = scaler.inverse_transform(predictions)
true_values_inv = scaler.inverse_transform(np.array([x[0] for x in generator]).reshape(-1,1))

# Evaluate
rmse = np.sqrt(mean_squared_error(true_values_inv, predictions_inv))
mae = np.mean(np.abs(true_values_inv - predictions_inv))
print(f'RMSE: {rmse}')
print(f'MAE: {mae}')

# Plot results
plt.figure(figsize=(10, 6))
plt.plot(true_values_inv, label='True ADR')
plt.plot(predictions_inv, label='Predicted ADR')
plt.xlabel('Time Step')
plt.ylabel('ADR')
plt.title('LSTM Forecast for Hotel ADR')
plt.legend()
plt.grid(True)
plt.show()
